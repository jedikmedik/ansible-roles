---
- name: Verify OS requirements
  assert:
    that:
      - ansible_distribution_file_variety == "RedHat"
      - ansible_distribution_major_version|int >= 7
    msg: "This role is for RHEL (CentOS) version 7 or higher."

- name: Import packages
  import_tasks: packages.yml

- name: File dirs
  file:
    path: "{{ item.path }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop:
    - path: /etc/nginx/vhosts.d
    - path: /etc/nginx/include.d
    - path: /var/www/html
    - path: /var/www/letsencrypt
    - path: /var/log/nginx
    - path: /var/cache/nginx

- name: Systemd section
  block:
    - name: File dirs
      file:
        path: "{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      loop:
        - path: /etc/systemd/system/nginx.service.d

    - name: Copy systemd override
      copy:
        src: "{{ item.path }}"
        dest: "/{{ item.path }}"
        owner: root
        group: root
        mode: "{{ item.mode|d('0644') }}"
      loop:
        - path: etc/systemd/system/nginx.service.d/override.conf
      notify:
        - reload systemd
        - restart nginx
  when: ansible_service_mgr == 'systemd'

- name: Self-signed cert section
  block:
    - name: Generate privkey for self-signed cert
      openssl_privatekey:
        path: "{{ nginx_self_signed.key }}"
      notify: validate nginx

    - name: Generate CSR for self-signed cert
      openssl_csr:
        path: "{{ nginx_self_signed.csr }}"
        privatekey_path: "{{ nginx_self_signed.key }}"
        common_name: "{{ ansible_fqdn }}"
        country_name: RU
        organization_name: Southbridge
        email_address: admin@southbridge.ru
      notify: validate nginx

    - name: Generate self-signed cert
      openssl_certificate:
        path: "{{ nginx_self_signed.cert }}"
        privatekey_path: "{{ nginx_self_signed.key }}"
        csr_path: "{{ nginx_self_signed.csr }}"
        provider: selfsigned
      notify: validate nginx

- name: Import certbot
  import_tasks: certbot.yml

- name: Nginx config section
  block:
    - name: Template Nginx configs
      template:
        src: "{{ item.path }}.j2"
        dest: "/{{ item.path }}"
        owner: root
        group: root
        mode: "{{ item.mode|d('0644') }}"
      loop:
        - path: etc/nginx/nginx.conf
        - path: etc/nginx/conf.d/default.conf
      notify: validate nginx

    - name: Copy Nginx configs
      copy:
        src: "{{ item.path }}"
        dest: "/{{ item.path }}"
        owner: root
        group: root
        mode: "{{ item.mode|d('0644') }}"
      loop:
        - path: etc/nginx/fastcgi_params
        - path: etc/nginx/include.d/letsencrypt.conf
      notify: validate nginx

    - name: Template Nginx vhosts
      template:
        src: "{{ item }}"
        dest: "/etc/nginx/vhosts.d/{{ item|basename|regex_replace('\\.j2$', '') }}"
        owner: root
        group: root
        mode: 0644
      when: nginx_vhost_files|length > 0
      loop: "{{ nginx_vhost_files }}"
      notify: validate nginx

    - name: Add fake upstreams in /etc/hosts
      blockinfile:
        path: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED BLOCK: NGINX"
        block: |
          127.0.0.127 puma static

- name: Copy html for default server
  copy:
    src: "{{ item.path }}"
    dest: "/{{ item.path }}"
    owner: root
    group: root
    mode: "{{ item.mode|d('0644') }}"
  loop:
    - path: var/www/html/index.html
    - path: var/www/html/http.html

- name: Nginx service
  service:
    name: nginx
    enabled: yes
    state: started

- name: Toggle SELinux booleans
  seboolean:
    name: "{{ item.name }}"
    state: "{{ item.state|d('yes') }}"
    persistent: yes
  with_items:
    - name: httpd_can_network_connect
    - name: httpd_setrlimit
  when: base_selinux_state|d('enforcing') != 'disabled'
  loop_control:
    label: "{{ item.name }}:{{ item.state|d('true') }}"
...
