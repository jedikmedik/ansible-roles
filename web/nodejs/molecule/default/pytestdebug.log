versions pytest-4.6.5, py-1.8.0, python-2.7.5.final.0
cwd=/home/gva/vagrant/iac-ansible/roles/base/molecule/default
args=['--debug', '-p', 'no:cacheprovider', '--connection=ansible', '--ansible-inventory=/tmp/molecule/base/default/inventory/ansible_inventory.yml', '/home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py', '-vvv']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f6968ee76d0>
    pytest_plugin_registered [hook]
        manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
        plugin: <Session default exitstatus='<UNSET>' testsfailed=0 testscollected=0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f6968ee76d0>
    early skip of rewriting module: py._io.terminalwriter [assertion]
    early skip of rewriting module: py._io.unicodedata [assertion]
    early skip of rewriting module: unicodedata [assertion]
    early skip of rewriting module: py._io.termios [assertion]
    early skip of rewriting module: termios [assertion]
    early skip of rewriting module: py._io.fcntl [assertion]
    early skip of rewriting module: py._io.struct [assertion]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.config.Config object at 0x7f6968ee76d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.mark' from '/usr/lib/python2.7/site-packages/_pytest/mark/__init__.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.main' from '/usr/lib/python2.7/site-packages/_pytest/main.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.runner' from '/usr/lib/python2.7/site-packages/_pytest/runner.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.fixtures' from '/usr/lib/python2.7/site-packages/_pytest/fixtures.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.helpconfig' from '/usr/lib/python2.7/site-packages/_pytest/helpconfig.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.python' from '/usr/lib/python2.7/site-packages/_pytest/python.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.terminal' from '/usr/lib/python2.7/site-packages/_pytest/terminal.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.debugging' from '/usr/lib/python2.7/site-packages/_pytest/debugging.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.unittest' from '/usr/lib/python2.7/site-packages/_pytest/unittest.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.capture' from '/usr/lib/python2.7/site-packages/_pytest/capture.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.skipping' from '/usr/lib/python2.7/site-packages/_pytest/skipping.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.tmpdir' from '/usr/lib/python2.7/site-packages/_pytest/tmpdir.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.monkeypatch' from '/usr/lib/python2.7/site-packages/_pytest/monkeypatch.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.recwarn' from '/usr/lib/python2.7/site-packages/_pytest/recwarn.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.pastebin' from '/usr/lib/python2.7/site-packages/_pytest/pastebin.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.nose' from '/usr/lib/python2.7/site-packages/_pytest/nose.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.assertion' from '/usr/lib/python2.7/site-packages/_pytest/assertion/__init__.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.junitxml' from '/usr/lib/python2.7/site-packages/_pytest/junitxml.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.resultlog' from '/usr/lib/python2.7/site-packages/_pytest/resultlog.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.doctest' from '/usr/lib/python2.7/site-packages/_pytest/doctest.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.freeze_support' from '/usr/lib/python2.7/site-packages/_pytest/freeze_support.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.setuponly' from '/usr/lib/python2.7/site-packages/_pytest/setuponly.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.setupplan' from '/usr/lib/python2.7/site-packages/_pytest/setupplan.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.warnings' from '/usr/lib/python2.7/site-packages/_pytest/warnings.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.logging' from '/usr/lib/python2.7/site-packages/_pytest/logging.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.reports' from '/usr/lib/python2.7/site-packages/_pytest/reports.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module 'testinfra.plugin' from '/root/.local/lib/python2.7/site-packages/testinfra/plugin.py'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <Session default exitstatus=0 testsfailed=0 testscollected=0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6968ba1490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6968b6e310>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session default exitstatus=0 testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.config.Config object at 0x7f6968ee76d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.mark' from '/usr/lib/python2.7/site-packages/_pytest/mark/__init__.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.main' from '/usr/lib/python2.7/site-packages/_pytest/main.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.runner' from '/usr/lib/python2.7/site-packages/_pytest/runner.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.fixtures' from '/usr/lib/python2.7/site-packages/_pytest/fixtures.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.helpconfig' from '/usr/lib/python2.7/site-packages/_pytest/helpconfig.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.python' from '/usr/lib/python2.7/site-packages/_pytest/python.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.terminal' from '/usr/lib/python2.7/site-packages/_pytest/terminal.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.debugging' from '/usr/lib/python2.7/site-packages/_pytest/debugging.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.unittest' from '/usr/lib/python2.7/site-packages/_pytest/unittest.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.capture' from '/usr/lib/python2.7/site-packages/_pytest/capture.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.skipping' from '/usr/lib/python2.7/site-packages/_pytest/skipping.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.tmpdir' from '/usr/lib/python2.7/site-packages/_pytest/tmpdir.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.monkeypatch' from '/usr/lib/python2.7/site-packages/_pytest/monkeypatch.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.recwarn' from '/usr/lib/python2.7/site-packages/_pytest/recwarn.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.pastebin' from '/usr/lib/python2.7/site-packages/_pytest/pastebin.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.nose' from '/usr/lib/python2.7/site-packages/_pytest/nose.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.assertion' from '/usr/lib/python2.7/site-packages/_pytest/assertion/__init__.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.junitxml' from '/usr/lib/python2.7/site-packages/_pytest/junitxml.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.resultlog' from '/usr/lib/python2.7/site-packages/_pytest/resultlog.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.doctest' from '/usr/lib/python2.7/site-packages/_pytest/doctest.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.freeze_support' from '/usr/lib/python2.7/site-packages/_pytest/freeze_support.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.setuponly' from '/usr/lib/python2.7/site-packages/_pytest/setuponly.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.setupplan' from '/usr/lib/python2.7/site-packages/_pytest/setupplan.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.warnings' from '/usr/lib/python2.7/site-packages/_pytest/warnings.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.logging' from '/usr/lib/python2.7/site-packages/_pytest/logging.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module '_pytest.reports' from '/usr/lib/python2.7/site-packages/_pytest/reports.pyc'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <module 'testinfra.plugin' from '/root/.local/lib/python2.7/site-packages/testinfra/plugin.py'>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <Session default exitstatus=0 testsfailed=0 testscollected=0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6968ba1490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6968b6e310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x7f6968ed1610>
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f6968be3c50>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          startdir: /home/gva/vagrant/iac-ansible/roles/base/molecule/default
          config: <_pytest.config.Config object at 0x7f6968ee76d0>
      finish pytest_report_header --> [['rootdir: /home/gva/vagrant/iac-ansible/roles/base/molecule/default', 'plugins: testinfra-3.0.6'], ['using: pytest-4.6.5 pylib-1.8.0', 'setuptools registered plugins:', u'  testinfra-3.0.6 at /root/.local/lib/python2.7/site-packages/testinfra/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session default exitstatus=0 testsfailed=0 testscollected=0>
    perform_collect <Session default exitstatus=0 testsfailed=0 testscollected=0> ['/home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py'] [collection]
        pytest_collectstart [hook]
            collector: <Session default exitstatus=0 testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session default exitstatus=0 testsfailed=0 testscollected=0>
        processing argument /home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py [collection]
            pytest_collect_file [hook]
                path: /home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py
                parent: <Session default exitstatus=0 testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py
                  parent: <Session default exitstatus=0 testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_default.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_default.py>] [hook]
          matchnodes [<Module tests/test_default.py>] [] [collection]
            matchnodes finished ->  1 nodes [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_default.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_default.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_default.py>
      find_module called for: test_default [assertion]
      matched test file (was specified on cmdline): '/home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py' [assertion]
      _read_pyc(/home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py): invalid or out of date pyc [assertion]
      rewriting '/home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py' [assertion]
      early skip of rewriting module: encodings.ascii [assertion]
      matched marked file 'testinfra.utils' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils.py' [assertion]
      matched marked file 'testinfra.utils.__future__' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.__future__ [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/__future__.py' [assertion]
      matched marked file 'testinfra.utils.contextlib' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.contextlib [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/contextlib.py' [assertion]
      matched marked file 'testinfra.utils.locale' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.locale [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/locale.py' [assertion]
      matched marked file 'testinfra.utils.re' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.re [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/re.py' [assertion]
      matched marked file 'testinfra.utils.shutil' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.shutil [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/shutil.py' [assertion]
      matched marked file 'testinfra.utils.tempfile' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.tempfile [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/tempfile.py' [assertion]
      matched marked file 'testinfra.utils.six' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.six [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/six.py' [assertion]
      matched marked file 'testinfra.utils.socket' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.socket [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/utils/socket.py' [assertion]
      matched marked file 'testinfra.utils.ansible_runner' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.ansible_runner [assertion]
      found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/utils/ansible_runner.py' [assertion]
      early skip of rewriting module: json [assertion]
      early skip of rewriting module: json.decoder [assertion]
      early skip of rewriting module: json.re [assertion]
      early skip of rewriting module: json.sys [assertion]
      early skip of rewriting module: json.struct [assertion]
      early skip of rewriting module: json.json [assertion]
      early skip of rewriting module: json.scanner [assertion]
      early skip of rewriting module: json._json [assertion]
      early skip of rewriting module: _json [assertion]
      early skip of rewriting module: encodings.hex_codec [assertion]
      early skip of rewriting module: encodings.binascii [assertion]
      early skip of rewriting module: json.encoder [assertion]
      matched marked file 'testinfra.backend.local' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.local [assertion]
      found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/backend/local.py' [assertion]
      matched marked file 'testinfra.backend.__builtin__' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.__builtin__ [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/__builtin__.py' [assertion]
      matched marked file 'testinfra.backend._pytest' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend._pytest [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/_pytest.py' [assertion]
      matched marked file 'testinfra.backend.testinfra' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.testinfra [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/testinfra.py' [assertion]
      matched marked file 'testinfra.backend.base' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.base [assertion]
      found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/backend/base.py' [assertion]
      matched marked file 'testinfra.backend.collections' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.collections [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/collections.py' [assertion]
      matched marked file 'testinfra.backend.locale' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.locale [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/locale.py' [assertion]
      matched marked file 'testinfra.backend.logging' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.logging [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/logging.py' [assertion]
      matched marked file 'testinfra.backend.pipes' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.pipes [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/pipes.py' [assertion]
      early skip of rewriting module: pipes [assertion]
      matched marked file 'testinfra.backend.subprocess' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.subprocess [assertion]
      rewriting '/root/.local/lib/python2.7/site-packages/testinfra/backend/subprocess.py' [assertion]
      early skip of rewriting module: subprocess [assertion]
      early skip of rewriting module: gc [assertion]
      early skip of rewriting module: select [assertion]
      early skip of rewriting module: pickle [assertion]
      early skip of rewriting module: org [assertion]
        pytest_pycollect_makeitem [hook]
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python2.7/site-packages/_pytest/assertion/rewrite.pyc'>
            collector: <Module tests/test_default.py>
            name: @pytest_ar
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: None
            collector: <Module tests/test_default.py>
            name: __spec__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: {'bytearray': <type 'bytearray'>, 'IndexError': <type 'exceptions.IndexError'>, 'all': <built-in function all>, 'help': Type help() for interactive help, or help(object) for help about object., 'vars': <built-in function vars>, 'SyntaxError': <type 'exceptions.SyntaxError'>, 'unicode': <type 'unicode'>, 'UnicodeDecodeError': <type 'exceptions.UnicodeDecodeError'>, 'memoryview': <type 'memoryview'>, 'isinstance': <built-in function isinstance>, 'copyright': Copyright (c) 2001-2013 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'NameError': <type 'exceptions.NameError'>, 'BytesWarning': <type 'exceptions.BytesWarning'>, 'dict': <type 'dict'>, 'input': <built-in function input>, 'oct': <built-in function oct>, 'bin': <built-in function bin>, 'SystemExit': <type 'exceptions.SystemExit'>, 'StandardError': <type 'exceptions.StandardError'>, 'format': <built-in function format>, 'repr': <built-in function repr>, 'sorted': <built-in function sorted>, 'False': False, 'RuntimeWarning': <type 'exceptions.RuntimeWarning'>, 'list': <type 'list'>, 'iter': <built-in function iter>, 'reload': <built-in function reload>, 'Warning': <type 'exceptions.Warning'>, '__package__': None, 'round': <built-in function round>, 'dir': <built-in function dir>, 'cmp': <built-in function cmp>, 'set': <type 'set'>, 'bytes': <type 'str'>, 'reduce': <built-in function reduce>, 'intern': <built-in function intern>, 'issubclass': <built-in function issubclass>, 'Ellipsis': Ellipsis, 'EOFError': <type 'exceptions.EOFError'>, 'locals': <built-in function locals>, 'BufferError': <type 'exceptions.BufferError'>, 'slice': <type 'slice'>, 'FloatingPointError': <type 'exceptions.FloatingPointError'>, 'sum': <built-in function sum>, 'getattr': <built-in function getattr>, 'abs': <built-in function abs>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'print': <built-in function print>, 'True': True, 'FutureWarning': <type 'exceptions.FutureWarning'>, 'ImportWarning': <type 'exceptions.ImportWarning'>, 'None': None, 'hash': <built-in function hash>, 'ReferenceError': <type 'exceptions.ReferenceError'>, 'len': <built-in function len>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'frozenset': <type 'frozenset'>, '__name__': '__builtin__', 'ord': <built-in function ord>, 'super': <type 'super'>, 'TypeError': <type 'exceptions.TypeError'>, 'license': See http://www.python.org/2.7/license.html, 'KeyboardInterrupt': <type 'exceptions.KeyboardInterrupt'>, 'UserWarning': <type 'exceptions.UserWarning'>, 'filter': <built-in function filter>, 'range': <built-in function range>, 'staticmethod': <type 'staticmethod'>, 'SystemError': <type 'exceptions.SystemError'>, 'BaseException': <type 'exceptions.BaseException'>, 'pow': <built-in function pow>, 'RuntimeError': <type 'exceptions.RuntimeError'>, 'float': <type 'float'>, 'MemoryError': <type 'exceptions.MemoryError'>, 'StopIteration': <type 'exceptions.StopIteration'>, 'globals': <built-in function globals>, 'divmod': <built-in function divmod>, 'enumerate': <type 'enumerate'>, 'apply': <built-in function apply>, 'LookupError': <type 'exceptions.LookupError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'basestring': <type 'basestring'>, 'UnicodeError': <type 'exceptions.UnicodeError'>, 'zip': <built-in function zip>, 'hex': <built-in function hex>, 'long': <type 'long'>, 'next': <built-in function next>, 'ImportError': <type 'exceptions.ImportError'>, 'chr': <built-in function chr>, 'xrange': <type 'xrange'>, 'type': <type 'type'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'Exception': <type 'exceptions.Exception'>, 'tuple': <type 'tuple'>, 'UnicodeTranslateError': <type 'exceptions.UnicodeTranslateError'>, 'reversed': <type 'reversed'>, 'UnicodeEncodeError': <type 'exceptions.UnicodeEncodeError'>, 'IOError': <type 'exceptions.IOError'>, 'hasattr': <built-in function hasattr>, 'delattr': <built-in function delattr>, 'setattr': <built-in function setattr>, 'raw_input': <built-in function raw_input>, 'SyntaxWarning': <type 'exceptions.SyntaxWarning'>, 'compile': <built-in function compile>, 'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'str': <type 'str'>, 'property': <type 'property'>, 'GeneratorExit': <type 'exceptions.GeneratorExit'>, 'int': <type 'int'>, '__import__': <built-in function __import__>, 'KeyError': <type 'exceptions.KeyError'>, 'coerce': <built-in function coerce>, 'PendingDeprecationWarning': <type 'exceptions.PendingDeprecationWarning'>, 'file': <type 'file'>, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, 'unichr': <built-in function unichr>, 'id': <built-in function id>, 'OSError': <type 'exceptions.OSError'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'min': <built-in function min>, 'UnicodeWarning': <type 'exceptions.UnicodeWarning'>, 'execfile': <built-in function execfile>, 'any': <built-in function any>, 'complex': <type 'complex'>, 'bool': <type 'bool'>, 'ValueError': <type 'exceptions.ValueError'>, 'NotImplemented': NotImplemented, 'map': <built-in function map>, 'buffer': <type 'buffer'>, 'max': <built-in function max>, 'object': <type 'object'>, 'TabError': <type 'exceptions.TabError'>, 'callable': <built-in function callable>, 'ZeroDivisionError': <type 'exceptions.ZeroDivisionError'>, 'eval': <built-in function eval>, '__debug__': True, 'IndentationError': <type 'exceptions.IndentationError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'classmethod': <type 'classmethod'>, 'UnboundLocalError': <type 'exceptions.UnboundLocalError'>, 'NotImplementedError': <type 'exceptions.NotImplementedError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'OverflowError': <type 'exceptions.OverflowError'>}
            collector: <Module tests/test_default.py>
            name: __builtins__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <module 'os' from '/usr/lib64/python2.7/os.pyc'>
            collector: <Module tests/test_default.py>
            name: os
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: /home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/test_default.py
            collector: <Module tests/test_default.py>
            name: __file__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <function test_hosts_file at 0x7f696866cc08>
            collector: <Module tests/test_default.py>
            name: test_hosts_file
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6968665b90>
          matched marked file 'testinfra.backend.ansible' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.ansible [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/backend/ansible.py' [assertion]
          early skip of rewriting module: encodings.unicode_escape [assertion]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_hosts_file[ansible://instance]>] [hook]
        pytest_pycollect_makeitem [hook]
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f6968be3910>
            collector: <Module tests/test_default.py>
            name: __loader__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <module 'pytest' from '/usr/lib/python2.7/site-packages/pytest.pyc'>
            collector: <Module tests/test_default.py>
            name: pytest
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <function test_selinux_status at 0x7f696866ccf8>
            collector: <Module tests/test_default.py>
            name: test_selinux_status
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6968676490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_selinux_status[ansible://instance]>] [hook]
        pytest_pycollect_makeitem [hook]
            obj: [u'instance']
            collector: <Module tests/test_default.py>
            name: testinfra_hosts
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <module 'testinfra' from '/root/.local/lib/python2.7/site-packages/testinfra/__init__.pyc'>
            collector: <Module tests/test_default.py>
            name: testinfra
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: /home/gva/vagrant/iac-ansible/roles/base/molecule/default/tests/__pycache__/test_default.cpython-27-PYTEST.pyc
            collector: <Module tests/test_default.py>
            name: __cached__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: test_default
            collector: <Module tests/test_default.py>
            name: __name__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <function test_pkg_absent at 0x7f696866cc80>
            collector: <Module tests/test_default.py>
            name: test_pkg_absent
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6968676850>
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: abrt
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: chrony
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: iwl* 
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pkg_absent[ansible://instance-abrt]>, <Function test_pkg_absent[ansible://instance-chrony]>, <Function test_pkg_absent[ansible://instance-iwl* ]>] [hook]
        pytest_pycollect_makeitem [hook]
            obj: None
            collector: <Module tests/test_default.py>
            name: __package__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <module '__builtin__' (built-in)>
            collector: <Module tests/test_default.py>
            name: @py_builtins
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: None
            collector: <Module tests/test_default.py>
            name: __doc__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <function test_pkg_instaleed at 0x7f696866c758>
            collector: <Module tests/test_default.py>
            name: test_pkg_instaleed
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f6968676ed0>
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: atool
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: bzip2
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: ccze
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: deltarpm
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: etckeeper
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: gdisk
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: htop
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: lbzip2
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: man-db
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: mc
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: ntp
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: rsync
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: tmux
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: tree
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: vim-minimal
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: yum-utils
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                argname: name
                config: <_pytest.config.Config object at 0x7f6968ee76d0>
                val: zsh
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pkg_instaleed[ansible://instance-atool]>, <Function test_pkg_instaleed[ansible://instance-bzip2]>, <Function test_pkg_instaleed[ansible://instance-ccze]>, <Function test_pkg_instaleed[ansible://instance-deltarpm]>, <Function test_pkg_instaleed[ansible://instance-etckeeper]>, <Function test_pkg_instaleed[ansible://instance-gdisk]>, <Function test_pkg_instaleed[ansible://instance-htop]>, <Function test_pkg_instaleed[ansible://instance-lbzip2]>, <Function test_pkg_instaleed[ansible://instance-man-db]>, <Function test_pkg_instaleed[ansible://instance-mc]>, <Function test_pkg_instaleed[ansible://instance-ntp]>, <Function test_pkg_instaleed[ansible://instance-rsync]>, <Function test_pkg_instaleed[ansible://instance-tmux]>, <Function test_pkg_instaleed[ansible://instance-tree]>, <Function test_pkg_instaleed[ansible://instance-vim-minimal]>, <Function test_pkg_instaleed[ansible://instance-yum-utils]>, <Function test_pkg_instaleed[ansible://instance-zsh]>] [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __setattr__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <built-in method __new__ of type object at 0x7f6975ec88a0>
            collector: <Module tests/test_default.py>
            name: __new__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __getattribute__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __delattr__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __repr__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <member '__dict__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __dict__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module tests/test_default.py>
            name: __init__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __reduce_ex__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __reduce__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __str__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <method '__format__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __format__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __class__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __subclasshook__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __hash__
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module tests/test_default.py>
            name: __sizeof__
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_default.py' lenresult=22 outcome='passed'> [hook]
    genitems <Function test_hosts_file[ansible://instance]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_hosts_file[ansible://instance]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-atool]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-atool]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-bzip2]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-ccze]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-ccze]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-deltarpm]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-etckeeper]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-gdisk]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-htop]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-htop]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-lbzip2]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-man-db]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-man-db]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-mc]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-mc]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-ntp]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-ntp]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-rsync]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-rsync]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-tmux]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-tmux]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-tree]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-tree]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-vim-minimal]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-yum-utils]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_instaleed[ansible://instance-zsh]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_instaleed[ansible://instance-zsh]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_absent[ansible://instance-abrt]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_absent[ansible://instance-abrt]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_absent[ansible://instance-chrony]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_absent[ansible://instance-chrony]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg_absent[ansible://instance-iwl* ]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg_absent[ansible://instance-iwl* ]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_selinux_status[ansible://instance]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_selinux_status[ansible://instance]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_default.py' lenresult=22 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          items: [<Function test_hosts_file[ansible://instance]>, <Function test_pkg_instaleed[ansible://instance-atool]>, <Function test_pkg_instaleed[ansible://instance-bzip2]>, <Function test_pkg_instaleed[ansible://instance-ccze]>, <Function test_pkg_instaleed[ansible://instance-deltarpm]>, <Function test_pkg_instaleed[ansible://instance-etckeeper]>, <Function test_pkg_instaleed[ansible://instance-gdisk]>, <Function test_pkg_instaleed[ansible://instance-htop]>, <Function test_pkg_instaleed[ansible://instance-lbzip2]>, <Function test_pkg_instaleed[ansible://instance-man-db]>, <Function test_pkg_instaleed[ansible://instance-mc]>, <Function test_pkg_instaleed[ansible://instance-ntp]>, <Function test_pkg_instaleed[ansible://instance-rsync]>, <Function test_pkg_instaleed[ansible://instance-tmux]>, <Function test_pkg_instaleed[ansible://instance-tree]>, <Function test_pkg_instaleed[ansible://instance-vim-minimal]>, <Function test_pkg_instaleed[ansible://instance-yum-utils]>, <Function test_pkg_instaleed[ansible://instance-zsh]>, <Function test_pkg_absent[ansible://instance-abrt]>, <Function test_pkg_absent[ansible://instance-chrony]>, <Function test_pkg_absent[ansible://instance-iwl* ]>, <Function test_selinux_status[ansible://instance]>]
          session: <Session default exitstatus=0 testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f6968ee76d0>
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session default exitstatus=0 testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            items: [<Function test_hosts_file[ansible://instance]>, <Function test_pkg_instaleed[ansible://instance-atool]>, <Function test_pkg_instaleed[ansible://instance-bzip2]>, <Function test_pkg_instaleed[ansible://instance-ccze]>, <Function test_pkg_instaleed[ansible://instance-deltarpm]>, <Function test_pkg_instaleed[ansible://instance-etckeeper]>, <Function test_pkg_instaleed[ansible://instance-gdisk]>, <Function test_pkg_instaleed[ansible://instance-htop]>, <Function test_pkg_instaleed[ansible://instance-lbzip2]>, <Function test_pkg_instaleed[ansible://instance-man-db]>, <Function test_pkg_instaleed[ansible://instance-mc]>, <Function test_pkg_instaleed[ansible://instance-ntp]>, <Function test_pkg_instaleed[ansible://instance-rsync]>, <Function test_pkg_instaleed[ansible://instance-tmux]>, <Function test_pkg_instaleed[ansible://instance-tree]>, <Function test_pkg_instaleed[ansible://instance-vim-minimal]>, <Function test_pkg_instaleed[ansible://instance-yum-utils]>, <Function test_pkg_instaleed[ansible://instance-zsh]>, <Function test_pkg_absent[ansible://instance-abrt]>, <Function test_pkg_absent[ansible://instance-chrony]>, <Function test_pkg_absent[ansible://instance-iwl* ]>, <Function test_selinux_status[ansible://instance]>]
            config: <_pytest.config.Config object at 0x7f6968ee76d0>
            startdir: /home/gva/vagrant/iac-ansible/roles/base/molecule/default
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_hosts_file[ansible://instance]>, <Function test_pkg_instaleed[ansible://instance-atool]>, <Function test_pkg_instaleed[ansible://instance-bzip2]>, <Function test_pkg_instaleed[ansible://instance-ccze]>, <Function test_pkg_instaleed[ansible://instance-deltarpm]>, <Function test_pkg_instaleed[ansible://instance-etckeeper]>, <Function test_pkg_instaleed[ansible://instance-gdisk]>, <Function test_pkg_instaleed[ansible://instance-htop]>, <Function test_pkg_instaleed[ansible://instance-lbzip2]>, <Function test_pkg_instaleed[ansible://instance-man-db]>, <Function test_pkg_instaleed[ansible://instance-mc]>, <Function test_pkg_instaleed[ansible://instance-ntp]>, <Function test_pkg_instaleed[ansible://instance-rsync]>, <Function test_pkg_instaleed[ansible://instance-tmux]>, <Function test_pkg_instaleed[ansible://instance-tree]>, <Function test_pkg_instaleed[ansible://instance-vim-minimal]>, <Function test_pkg_instaleed[ansible://instance-yum-utils]>, <Function test_pkg_instaleed[ansible://instance-zsh]>, <Function test_pkg_absent[ansible://instance-abrt]>, <Function test_pkg_absent[ansible://instance-chrony]>, <Function test_pkg_absent[ansible://instance-iwl* ]>, <Function test_selinux_status[ansible://instance]>] [hook]
    pytest_runtestloop [hook]
        session: <Session default exitstatus=0 testsfailed=0 testscollected=22>
      pytest_runtest_protocol [hook]
          item: <Function test_hosts_file[ansible://instance]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-atool]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 10, 'test_hosts_file[ansible://instance]')
            nodeid: tests/test_default.py::test_hosts_file[ansible://instance]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_hosts_file[ansible://instance]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_hosts_file[ansible://instance]>>
          finish pytest_fixture_setup --> <testinfra.host.Host object at 0x7f6968665f90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_hosts_file[ansible://instance]>>
          finish pytest_fixture_setup --> <testinfra.host.Host object at 0x7f6968665f90> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hosts_file[ansible://instance]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_hosts_file[ansible://instance]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_hosts_file[ansible://instance]>
          matched marked file 'testinfra.modules.file' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.file [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/modules/file.py' [assertion]
          matched marked file 'testinfra.modules.__builtin__' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.__builtin__ [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/__builtin__.py' [assertion]
          matched marked file 'testinfra.modules._pytest' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules._pytest [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/_pytest.py' [assertion]
          matched marked file 'testinfra.modules.datetime' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.datetime [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/datetime.py' [assertion]
          matched marked file 'testinfra.modules.six' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.six [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/six.py' [assertion]
          matched marked file 'testinfra.modules.testinfra' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.testinfra [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/testinfra.py' [assertion]
          matched marked file 'testinfra.modules.base' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.base [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/modules/base.py' [assertion]
          matched marked file 'testinfra.modules.systeminfo' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.systeminfo [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/modules/systeminfo.py' [assertion]
          matched marked file 'testinfra.modules.re' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.re [assertion]
          rewriting '/root/.local/lib/python2.7/site-packages/testinfra/modules/re.py' [assertion]
          matched marked file 'testinfra.backend.paramiko' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.paramiko [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/backend/paramiko.py' [assertion]
          early skip of rewriting module: paramiko [assertion]
          early skip of rewriting module: paramiko.sys [assertion]
          early skip of rewriting module: paramiko.paramiko [assertion]
          early skip of rewriting module: paramiko._version [assertion]
          early skip of rewriting module: paramiko.transport [assertion]
          early skip of rewriting module: paramiko.__future__ [assertion]
          early skip of rewriting module: paramiko.os [assertion]
          early skip of rewriting module: paramiko.socket [assertion]
          early skip of rewriting module: paramiko.threading [assertion]
          early skip of rewriting module: paramiko.time [assertion]
          early skip of rewriting module: paramiko.weakref [assertion]
          early skip of rewriting module: paramiko.hashlib [assertion]
          early skip of rewriting module: paramiko.cryptography [assertion]
          early skip of rewriting module: cryptography [assertion]
          early skip of rewriting module: cryptography.__about__ [assertion]
          early skip of rewriting module: cryptography.hazmat [assertion]
          early skip of rewriting module: cryptography.hazmat.backends [assertion]
          early skip of rewriting module: pkg_resources [assertion]
          early skip of rewriting module: plistlib [assertion]
          early skip of rewriting module: _imp [assertion]
          early skip of rewriting module: pkg_resources.extern [assertion]
          early skip of rewriting module: pkg_resources.extern.sys [assertion]
          early skip of rewriting module: pkg_resources.extern.six [assertion]
          early skip of rewriting module: pkg_resources._vendor [assertion]
          early skip of rewriting module: pkg_resources._vendor.six [assertion]
          early skip of rewriting module: pkg_resources.extern.six.moves [assertion]
          early skip of rewriting module: pkg_resources._vendor.six.moves [assertion]
          early skip of rewriting module: pkg_resources._vendor.six.moves.urllib [assertion]
          early skip of rewriting module: importlib.machinery [assertion]
          early skip of rewriting module: pkg_resources.py31compat [assertion]
          early skip of rewriting module: pkg_resources.os [assertion]
          early skip of rewriting module: pkg_resources.errno [assertion]
          early skip of rewriting module: pkg_resources.sys [assertion]
          early skip of rewriting module: pkg_resources.extern.appdirs [assertion]
          early skip of rewriting module: pkg_resources._vendor.appdirs [assertion]
          early skip of rewriting module: pkg_resources._vendor.sys [assertion]
          early skip of rewriting module: pkg_resources._vendor.os [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.__about__ [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.version [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.version [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging._structures [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.specifiers [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.specifiers [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging._compat [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.requirements [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.requirements [assertion]
          early skip of rewriting module: pkg_resources.extern.pyparsing [assertion]
          early skip of rewriting module: pkg_resources._vendor.pyparsing [assertion]
          early skip of rewriting module: pkg_resources._vendor.string [assertion]
          early skip of rewriting module: pkg_resources._vendor.weakref [assertion]
          early skip of rewriting module: pkg_resources._vendor.copy [assertion]
          early skip of rewriting module: pkg_resources._vendor.warnings [assertion]
          early skip of rewriting module: pkg_resources._vendor.re [assertion]
          early skip of rewriting module: pkg_resources._vendor.sre_constants [assertion]
          early skip of rewriting module: pkg_resources._vendor.collections [assertion]
          early skip of rewriting module: pkg_resources._vendor.pprint [assertion]
          early skip of rewriting module: pkg_resources._vendor.traceback [assertion]
          early skip of rewriting module: pkg_resources._vendor.types [assertion]
          early skip of rewriting module: pkg_resources._vendor.datetime [assertion]
          early skip of rewriting module: pkg_resources._vendor._thread [assertion]
          early skip of rewriting module: _thread [assertion]
          early skip of rewriting module: _thread.RLock [assertion]
          early skip of rewriting module: pkg_resources._vendor.threading [assertion]
          early skip of rewriting module: pkg_resources._vendor.__builtin__ [assertion]
          early skip of rewriting module: pkg_resources.extern.six.moves.urllib [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.markers [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.markers [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.multibackend [assertion]
          early skip of rewriting module: cryptography.utils [assertion]
          early skip of rewriting module: cryptography.exceptions [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.interfaces [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
          early skip of rewriting module: paramiko.util [assertion]
          early skip of rewriting module: paramiko.errno [assertion]
          early skip of rewriting module: paramiko.struct [assertion]
          early skip of rewriting module: paramiko.traceback [assertion]
          early skip of rewriting module: paramiko.logging [assertion]
          early skip of rewriting module: paramiko.common [assertion]
          early skip of rewriting module: paramiko.py3compat [assertion]
          early skip of rewriting module: paramiko.base64 [assertion]
          early skip of rewriting module: paramiko.__builtin__ [assertion]
          early skip of rewriting module: paramiko.cStringIO [assertion]
          early skip of rewriting module: paramiko.config [assertion]
          early skip of rewriting module: paramiko.fnmatch [assertion]
          early skip of rewriting module: paramiko.re [assertion]
          early skip of rewriting module: paramiko.shlex [assertion]
          early skip of rewriting module: paramiko.auth_handler [assertion]
          early skip of rewriting module: paramiko.message [assertion]
          early skip of rewriting module: paramiko.ssh_exception [assertion]
          early skip of rewriting module: paramiko.server [assertion]
          early skip of rewriting module: paramiko.ssh_gss [assertion]
          early skip of rewriting module: paramiko.pyasn1 [assertion]
          early skip of rewriting module: pyasn1 [assertion]
          early skip of rewriting module: pyasn1.sys [assertion]
          early skip of rewriting module: pyasn1.type [assertion]
          early skip of rewriting module: pyasn1.type.univ [assertion]
          early skip of rewriting module: pyasn1.type.operator [assertion]
          early skip of rewriting module: pyasn1.type.sys [assertion]
          early skip of rewriting module: pyasn1.type.math [assertion]
          early skip of rewriting module: pyasn1.type.pyasn1 [assertion]
          early skip of rewriting module: pyasn1.type.base [assertion]
          early skip of rewriting module: pyasn1.type.constraint [assertion]
          early skip of rewriting module: pyasn1.type.error [assertion]
          early skip of rewriting module: pyasn1.error [assertion]
          early skip of rewriting module: pyasn1.type.tagmap [assertion]
          early skip of rewriting module: pyasn1.type.tag [assertion]
          early skip of rewriting module: pyasn1.type.namedtype [assertion]
          early skip of rewriting module: pyasn1.type.namedval [assertion]
          early skip of rewriting module: pyasn1.codec [assertion]
          early skip of rewriting module: pyasn1.codec.ber [assertion]
          early skip of rewriting module: pyasn1.codec.ber.eoo [assertion]
          early skip of rewriting module: pyasn1.codec.ber.pyasn1 [assertion]
          early skip of rewriting module: pyasn1.compat [assertion]
          early skip of rewriting module: pyasn1.compat.octets [assertion]
          early skip of rewriting module: pyasn1.compat.sys [assertion]
          early skip of rewriting module: pyasn1.codec.der [assertion]
          early skip of rewriting module: pyasn1.codec.der.encoder [assertion]
          early skip of rewriting module: pyasn1.codec.der.pyasn1 [assertion]
          early skip of rewriting module: pyasn1.codec.cer [assertion]
          early skip of rewriting module: pyasn1.codec.cer.encoder [assertion]
          early skip of rewriting module: pyasn1.codec.cer.pyasn1 [assertion]
          early skip of rewriting module: pyasn1.type.useful [assertion]
          early skip of rewriting module: pyasn1.type.char [assertion]
          early skip of rewriting module: pyasn1.codec.ber.encoder [assertion]
          early skip of rewriting module: pyasn1.debug [assertion]
          early skip of rewriting module: pyasn1.time [assertion]
          early skip of rewriting module: pyasn1.logging [assertion]
          early skip of rewriting module: pyasn1.pyasn1 [assertion]
          early skip of rewriting module: pyasn1.codec.der.decoder [assertion]
          early skip of rewriting module: pyasn1.codec.cer.decoder [assertion]
          early skip of rewriting module: pyasn1.codec.ber.decoder [assertion]
          early skip of rewriting module: paramiko.gssapi [assertion]
          early skip of rewriting module: gssapi [assertion]
          early skip of rewriting module: paramiko.sspicon [assertion]
          early skip of rewriting module: sspicon [assertion]
          early skip of rewriting module: paramiko.channel [assertion]
          early skip of rewriting module: paramiko.binascii [assertion]
          early skip of rewriting module: paramiko.functools [assertion]
          early skip of rewriting module: paramiko.file [assertion]
          early skip of rewriting module: paramiko.buffered_pipe [assertion]
          early skip of rewriting module: paramiko.array [assertion]
          early skip of rewriting module: paramiko.pipe [assertion]
          early skip of rewriting module: paramiko.compress [assertion]
          early skip of rewriting module: paramiko.zlib [assertion]
          early skip of rewriting module: paramiko.dsskey [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
          early skip of rewriting module: fractions [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
          early skip of rewriting module: paramiko.ber [assertion]
          early skip of rewriting module: paramiko.pkey [assertion]
          early skip of rewriting module: paramiko.kex_gex [assertion]
          early skip of rewriting module: paramiko.kex_group1 [assertion]
          early skip of rewriting module: paramiko.kex_group14 [assertion]
          early skip of rewriting module: paramiko.kex_gss [assertion]
          early skip of rewriting module: paramiko.packet [assertion]
          early skip of rewriting module: paramiko.hmac [assertion]
          early skip of rewriting module: hmac [assertion]
          early skip of rewriting module: paramiko.primes [assertion]
          early skip of rewriting module: paramiko.rsakey [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
          early skip of rewriting module: paramiko.ecdsakey [assertion]
          early skip of rewriting module: paramiko.sftp_client [assertion]
          early skip of rewriting module: paramiko.stat [assertion]
          early skip of rewriting module: paramiko.sftp [assertion]
          early skip of rewriting module: paramiko.select [assertion]
          early skip of rewriting module: paramiko.sftp_attr [assertion]
          early skip of rewriting module: paramiko.sftp_file [assertion]
          early skip of rewriting module: paramiko.collections [assertion]
          early skip of rewriting module: paramiko.atexit [assertion]
          early skip of rewriting module: paramiko.client [assertion]
          early skip of rewriting module: paramiko.getpass [assertion]
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: paramiko.warnings [assertion]
          early skip of rewriting module: paramiko.agent [assertion]
          early skip of rewriting module: paramiko.tempfile [assertion]
          early skip of rewriting module: paramiko.hostkeys [assertion]
          early skip of rewriting module: paramiko.resource [assertion]
          early skip of rewriting module: paramiko.sftp_server [assertion]
          early skip of rewriting module: paramiko.sftp_si [assertion]
          early skip of rewriting module: paramiko.sftp_handle [assertion]
          early skip of rewriting module: paramiko.proxy [assertion]
          early skip of rewriting module: paramiko.datetime [assertion]
          early skip of rewriting module: paramiko.signal [assertion]
          early skip of rewriting module: encodings.idna [assertion]
          early skip of rewriting module: encodings.stringprep [assertion]
          early skip of rewriting module: stringprep [assertion]
          early skip of rewriting module: encodings.re [assertion]
          early skip of rewriting module: encodings.unicodedata [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.backend [assertion]
          early skip of rewriting module: cryptography.x509 [assertion]
          early skip of rewriting module: cryptography.x509.base [assertion]
          early skip of rewriting module: cryptography.x509.extensions [assertion]
          early skip of rewriting module: ipaddress [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.constant_time [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings._constant_time [assertion]
          early skip of rewriting module: _cffi_backend [assertion]
          early skip of rewriting module: cryptography.x509.general_name [assertion]
          early skip of rewriting module: idna [assertion]
          early skip of rewriting module: idna.package_data [assertion]
          early skip of rewriting module: idna.core [assertion]
          early skip of rewriting module: idna.idnadata [assertion]
          early skip of rewriting module: idna.bisect [assertion]
          early skip of rewriting module: idna.unicodedata [assertion]
          early skip of rewriting module: idna.re [assertion]
          early skip of rewriting module: idna.sys [assertion]
          early skip of rewriting module: idna.intranges [assertion]
          early skip of rewriting module: six.moves.urllib_parse [assertion]
          early skip of rewriting module: cryptography.x509.name [assertion]
          early skip of rewriting module: cryptography.x509.oid [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.ciphers [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.cmac [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.interfaces [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.dh [assertion]
          early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dh [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.dsa [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.utils [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.ec [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.encode_asn1 [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.decode_asn1 [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.hashes [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.hmac [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.rsa [assertion]
          early skip of rewriting module: cryptography.hazmat.backends.openssl.x509 [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings._openssl [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings.openssl [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings.openssl.binding [assertion]
          early skip of rewriting module: cryptography.hazmat.bindings.openssl._conditional [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hosts_file[ansible://instance]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_hosts_file[ansible://instance]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-atool]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hosts_file[ansible://instance]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_hosts_file[ansible://instance]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 10, 'test_hosts_file[ansible://instance]')
            nodeid: tests/test_default.py::test_hosts_file[ansible://instance]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-atool]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-bzip2]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-atool]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-atool]>>
          finish pytest_fixture_setup --> atool [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-atool]>
          matched marked file 'testinfra.modules.package' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.package [assertion]
          found cached rewritten pyc for '/root/.local/lib/python2.7/site-packages/testinfra/modules/package.py' [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-bzip2]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-atool]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-atool]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-atool]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-atool]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-ccze]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-bzip2]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-bzip2]>>
          finish pytest_fixture_setup --> bzip2 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-bzip2]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-ccze]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-bzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-bzip2]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-bzip2]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-bzip2]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-ccze]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-ccze]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-ccze]>>
          finish pytest_fixture_setup --> ccze [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-ccze]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-ccze]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ccze]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-ccze]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-ccze]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-deltarpm]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-deltarpm]>>
          finish pytest_fixture_setup --> deltarpm [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-deltarpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-deltarpm]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-deltarpm]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-deltarpm]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-gdisk]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-etckeeper]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-etckeeper]>>
          finish pytest_fixture_setup --> etckeeper [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-gdisk]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-etckeeper]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-etckeeper]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-etckeeper]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-etckeeper]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-htop]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-gdisk]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-gdisk]>>
          finish pytest_fixture_setup --> gdisk [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-gdisk]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-htop]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-gdisk]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-gdisk]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-gdisk]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-gdisk]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-htop]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-htop]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-htop]>>
          finish pytest_fixture_setup --> htop [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-htop]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-htop]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-htop]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-htop]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-htop]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-man-db]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-lbzip2]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-lbzip2]>>
          finish pytest_fixture_setup --> lbzip2 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-man-db]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-lbzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-lbzip2]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-lbzip2]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-lbzip2]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-man-db]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-mc]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-man-db]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-man-db]>>
          finish pytest_fixture_setup --> man-db [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-man-db]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-mc]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-man-db]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-man-db]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-man-db]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-man-db]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-mc]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-ntp]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-mc]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-mc]>>
          finish pytest_fixture_setup --> mc [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-mc]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-ntp]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-mc]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-mc]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-mc]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-mc]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-ntp]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-rsync]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-ntp]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-ntp]>>
          finish pytest_fixture_setup --> ntp [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-ntp]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-rsync]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-ntp]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-ntp]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-ntp]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-ntp]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-rsync]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-tmux]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-rsync]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-rsync]>>
          finish pytest_fixture_setup --> rsync [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-rsync]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-tmux]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-rsync]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-rsync]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-rsync]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-rsync]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-tmux]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-tree]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-tmux]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-tmux]>>
          finish pytest_fixture_setup --> tmux [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-tmux]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-tree]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-tmux]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tmux]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-tmux]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-tmux]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-tree]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-tree]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-tree]>>
          finish pytest_fixture_setup --> tree [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-tree]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-tree]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-tree]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-tree]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-tree]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-vim-minimal]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-vim-minimal]>>
          finish pytest_fixture_setup --> vim-minimal [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-vim-minimal]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-vim-minimal]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-vim-minimal]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-vim-minimal]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
          nextitem: <Function test_pkg_instaleed[ansible://instance-zsh]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-yum-utils]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-yum-utils]>>
          finish pytest_fixture_setup --> yum-utils [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
            nextitem: <Function test_pkg_instaleed[ansible://instance-zsh]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-yum-utils]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-yum-utils]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-yum-utils]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-yum-utils]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_instaleed[ansible://instance-zsh]>
          nextitem: <Function test_pkg_absent[ansible://instance-abrt]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-zsh]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-zsh]>>
          finish pytest_fixture_setup --> zsh [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_instaleed[ansible://instance-zsh]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
            nextitem: <Function test_pkg_absent[ansible://instance-abrt]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_instaleed[ansible://instance-zsh]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_instaleed[ansible://instance-zsh]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 18, 'test_pkg_instaleed[ansible://instance-zsh]')
            nodeid: tests/test_default.py::test_pkg_instaleed[ansible://instance-zsh]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_absent[ansible://instance-abrt]>
          nextitem: <Function test_pkg_absent[ansible://instance-chrony]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-abrt]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-abrt]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-abrt]>>
          finish pytest_fixture_setup --> abrt [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_absent[ansible://instance-abrt]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
            nextitem: <Function test_pkg_absent[ansible://instance-chrony]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-abrt]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-abrt]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-abrt]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-abrt]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-abrt]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_absent[ansible://instance-chrony]>
          nextitem: <Function test_pkg_absent[ansible://instance-iwl* ]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-chrony]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-chrony]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-chrony]>>
          finish pytest_fixture_setup --> chrony [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_absent[ansible://instance-chrony]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
            nextitem: <Function test_pkg_absent[ansible://instance-iwl* ]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-chrony]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-chrony]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-chrony]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-chrony]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-chrony]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg_absent[ansible://instance-iwl* ]>
          nextitem: <Function test_selinux_status[ansible://instance]>
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-iwl* ]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-iwl* ]>>
          finish pytest_fixture_setup --> iwl*  [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg_absent[ansible://instance-iwl* ]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
            nextitem: <Function test_selinux_status[ansible://instance]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='name' scope='function' baseid=''>
              request: <SubRequest 'name' for <Function test_pkg_absent[ansible://instance-iwl* ]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg_absent[ansible://instance-iwl* ]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 43, 'test_pkg_absent[ansible://instance-iwl* ]')
            nodeid: tests/test_default.py::test_pkg_absent[ansible://instance-iwl* ]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_selinux_status[ansible://instance]>
          nextitem: None
        pytest_runtest_logstart [hook]
            location: ('tests/test_default.py', 54, 'test_selinux_status[ansible://instance]')
            nodeid: tests/test_default.py::test_selinux_status[ansible://instance]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_selinux_status[ansible://instance]>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_selinux_status[ansible://instance]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_selinux_status[ansible://instance]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_selinux_status[ansible://instance]>
        pytest_runtest_makereport [hook]
            item: <Function test_selinux_status[ansible://instance]>
            call: <CallInfo when='call' exception: 'CommandResult' object has no attribute 'selinux'>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='call' outcome='failed'>
            node: <Function test_selinux_status[ansible://instance]>
            call: <CallInfo when='call' exception: 'CommandResult' object has no attribute 'selinux'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_selinux_status[ansible://instance]>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_selinux_status[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_selinux_status[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-iwl* ]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-chrony]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-abrt]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-zsh]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-yum-utils]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-vim-minimal]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-tree]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-tmux]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-rsync]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-ntp]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-mc]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-man-db]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-lbzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-htop]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-gdisk]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-etckeeper]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-deltarpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-ccze]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-bzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-atool]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_hosts_file[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_selinux_status[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-iwl* ]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_absent[ansible://instance-iwl* ]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-chrony]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_absent[ansible://instance-chrony]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_absent[ansible://instance-abrt]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_absent[ansible://instance-abrt]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-zsh]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-zsh]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-yum-utils]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-yum-utils]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-vim-minimal]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-vim-minimal]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-tree]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-tree]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-tmux]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-tmux]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-rsync]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-rsync]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-ntp]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-ntp]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-mc]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-mc]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-man-db]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-man-db]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-lbzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-lbzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-htop]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-htop]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-gdisk]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-gdisk]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-etckeeper]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-etckeeper]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-deltarpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-deltarpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-ccze]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-ccze]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-bzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-bzip2]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg_instaleed[ansible://instance-atool]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg_instaleed[ansible://instance-atool]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope=u'module' baseid=''>
              request: <SubRequest 'host' for <Function test_hosts_file[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope=u'module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_hosts_file[ansible://instance]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_selinux_status[ansible://instance]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_default.py::test_selinux_status[ansible://instance]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6968ee76d0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            location: ('tests/test_default.py', 54, 'test_selinux_status[ansible://instance]')
            nodeid: tests/test_default.py::test_selinux_status[ansible://instance]
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session default exitstatus=1 testsfailed=1 testscollected=22>
        exitstatus: 1
      pytest_terminal_summary [hook]
          config: <_pytest.config.Config object at 0x7f6968ee76d0>
          exitstatus: 1
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f6968ba1490>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f6968ee76d0>
    finish pytest_unconfigure --> [] [hook]
